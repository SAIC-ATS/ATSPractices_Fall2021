"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withShade = exports.withTint = exports.shade = exports.tint = exports.hexValue = exports.parseColor = void 0;
function parseColor(color = '') {
    if (typeof color !== 'string') {
        throw new TypeError('Color should be string!');
    }
    const hexMatch = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
    if (hexMatch) {
        return hexMatch.splice(1).map(c => parseInt(c, 16));
    }
    const hexMatchShort = /^#?([a-f\d])([a-f\d])([a-f\d])$/i.exec(color);
    if (hexMatchShort) {
        return hexMatchShort.splice(1).map(c => parseInt(c + c, 16));
    }
    if (color.includes(',')) {
        return color.split(',').map(p => parseInt(p));
    }
    throw new Error('Invalid color format! Use #ABC or #AABBCC or r,g,b');
}
exports.parseColor = parseColor;
function hexValue(components) {
    return '#' + components.map(c => `0${c.toString(16).toUpperCase()}`.slice(-2)).join('');
}
exports.hexValue = hexValue;
function tint(components, intensity) {
    return components.map(c => Math.round(c + (255 - c) * intensity));
}
exports.tint = tint;
function shade(components, intensity) {
    return components.map(c => Math.round(c * intensity));
}
exports.shade = shade;
exports.withTint = intensity => hex => tint(hex, intensity);
exports.withShade = intensity => hex => shade(hex, intensity);
